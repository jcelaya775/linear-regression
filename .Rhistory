plot(lm.fit ~ crim)
plot(lm.fit$fitted.values, xlab = "zn", ylab = "Per Capita Crime Rate")
plot(lm.fit$fitted.values, xlab = "indus", ylab = "Per Capita Crime Rate")
lm.fit = lm(crim ~ indus)
summary(lm.fit)
plot(lm.fit$fitted.values, xlab = "indus", ylab = "Per Capita Crime Rate")
lm.fit = lm(crim ~ zn)
plot(lm.fit$fitted.values, xlab = "zn", ylab = "Per Capita Crime Rate")
plot(lm.fit$fitted.values, xlab = "indus", ylab = "Per Capita Crime Rate")
lm.fit = lm(crim ~ indus)
plot(lm.fit$fitted.values, xlab = "indus", ylab = "Per Capita Crime Rate")
setwd("c:/repos/r/project-1")
library(MASS)
attach(Carseats)
# (a): Fit multiple regression model
lm.fit = lm(Sales ~ Price + Urban + US)
summary(lm.fit)
library(MASS)
attach(Carseats)
# (a): Fit multiple regression model
lm.fit = lm(Sales ~ Price + Urban + US)
summary(lm.fit)
?Carseats
# Fit multiple regression model
lm.fit = lm(Sales ~ Price + Urban + US)
summary(lm.fit)
# Fit multiple regression model
lm.fit = lm(Sales ~ Price + Urban + US)
library(MASS)
attach(Carseats)
names(Carseats)
library(MASS)
attach(Carseats)
library(ISLR)
attach(Carseats)
# Fit multiple regression model
lm.fit = lm(Sales ~ Price + Urban + US)
summary(lm.fit)
lm.fit = lm(Sales ~ Price + US)
summary(lm.fit)
# Fit multiple regression model
lm.fit = lm(Sales ~ Price + Urban + US)
summary(lm.fit)
lm.fit = lm(Sales ~ Price + US)
summary(lm.fit)
confint(lm.fit)
?confint
confint(lm.fit, level = 0.95)
# Fit multiple regression model
lm.fit = lm(Sales ~ Price + Urban + US)
summary(lm.fit)
print(summary(lm.fit))
summary(lm.fit)
lm.fit = lm(Sales ~ Price + US)
summary(lm.fit)
confint(lm.fit, level = 0.95)
range(lm.fit$fitted.values)
lm.fit$fitted.values
range(lm.fit$fitted.values)
range(Sales)
range(Sales)
range(Price)
range(Urban)
range(Sales)
summary(Sales)
range(Price)
summary(Price)
as.data.frame(hatvalues(lm.fit))
as.data.frame(hatvalues(lm.fit))[< 2]
as.data.frame(hatvalues(lm.fit))[ ,< 2]
as.data.frame(hatvalues(lm.fit))[hatvalues(lm.fit) < 2]
as.data.frame(hatvalues(lm.fit))
hist(Price)
hist(US)
hist(lm.fit)
hist(lm.fit$fitted.values)
hist(lm.fit$fitted.values)
hist(US)
hist(Price)
lm.fit
hist(lm.fit$fitted.values)
simulate.data = function(n, mean, sd) {
x = rnorm(n = n, mean = mean, sd = sd)
eps = rnorm(n = n, mean = mean, sd = sd)
y = -1 + 0.5*x + eps # true f
summary(y)
return(data.frame(x, y))
}
compare.models = function(x, y, legX = -2, legY = 0) {
# X vs Y has a positive correlation
plot(x, y, main = "Linear Regression Comparison")
# Fit least squares model
lm.fit = lm(y ~ x) # estimated f
print("Without quadratic term")
print(summary(lm.fit))
print("Confidence interval:")
print(confint(lm.fit))
abline(lm.fit, col = "red")
print("=======================================================================")
# Fit using quadratic term
lm.fit2 = lm(y ~ x + I(x^2))
print("With quadratic term")
print(summary(lm.fit2))
print("Confidence interval:")
print(confint(lm.fit2))
abline(lm.fit2, col = "blue")
legend(legX, legY, legend = c("y ~ x", "y ~ x + x^2"), lty = c(1), col = c("red", "blue"))
}
# Compare linear regression models
data = simulate.data(n = 100, mean = 0, sd = 1)
x = data$x
y = data$y
print("Moderate noise")
compare.models(x, y, legX = -2, legY = 0.3)
dev.off()
# Compare linear regression models
data = simulate.data(n = 100, mean = 0, sd = 1)
x = data$x
y = data$y
plot(x, y )
# Compare linear regression models
data = simulate.data(n = 100, mean = 0, sd = 1)
x = data$x
y = data$y
print("Moderate noise")
compare.models(x, y, legX = -2, legY = 0.3)
dev.off()
plot(y ~ x)
plot(x, y)
abline(lm(y ~ x))
# Compare linear regression models
data = simulate.data(n = 100, mean = 0, sd = 1)
x = data$x
y = data$y
plot(x, y)
print("Moderate noise")
compare.models(x, y, legX = -2, legY = 0.3)
dev.off()
# Compare linear regression models
data = simulate.data(n = 100, mean = 0, sd = 1)
x = data$x
y = data$y
plot(x, y)
abline(lm.fit, col = "red")
plot(x, y)
abline(lm.fit, col = "red")
lm.fit = lm(y ~ x)
abline(lm.fit, col = "red")
abline(y ~ x, col = "blue")
abline(x, y, col = "blue")
dev.off()
lm.fit = lm(y ~ x)
abline(lm.fit, col = "red")
y = data$y
plot(x, y)
lm.fit = lm(y ~ x)
abline(lm.fit, col = "red")
abline(y, col = "blue")
abline(y ~ x, col = "blue")
dev.off()
plot(x, y)
abline(y ~ x, col = "blue")
abline(-1 + 0.5*x, col = "blue")
abline(lm.fit, col = "red")
abline(y ~ -1 + 0.5*x, col = "blue")
abline(y ~ -1 + 0.5*x, col = "blue")
abline(y ~ -1 + 0.5*x, col = "blue")
true.f = -1 + 0.5*x
abline(true.f, col = "blue")
true.f = -1 + 0.5*x
true.f
abline(true.f, x, col = "blue")
abline(x, true.f, col = "blue")
abline(true.f, col = "blue")
abline
?abline
abline(-1, 0.5, col = "blue")
dev.off()
abline(lm.fit, col = "red")
abline(-1, 0.5, col = "blue")
plot(x, y)
lm.fit = lm(y ~ x)
abline(lm.fit, col = "red")
abline(-1, 0.5, col = "blue")
legend(legend = c("esimated y", "true y"), lty = c(1, 1), col = c("red", "blue"))
legend(legend = c("esimated y", "true y"), lty = c(1, 1), col = c("red", "blue"))
legend(-2, 1, legend = c("esimated y", "true y"), lty = c(1, 1), col = c("red", "blue"))
legend(-2, 1, legend = c("Estimated y", "True y"), lty = c(1, 1), col = c("red", "blue"))
legend(-2, 1, legend = c("Estimated y", "True y"), lty = c(1, 1), col = c("red", "blue"))
print("Moderate noise")
compare.models(x, y, legX = -2, legY = 0.3)
# Compare linear regression models
data = simulate.data(n = 100, mean = 0, sd = 1)
x = data$x
y = data$y
plot(x, y)
lm.fit = lm(y ~ x)
abline(lm.fit, col = "red")
abline(-1, 0.5, col = "blue")
legend(-2, 1, legend = c("Estimated y", "True y"), lty = c(1, 1), col = c("red", "blue"))
print("Moderate noise")
compare.models(x, y, legX = -2, legY = 0.3)
# Compare models with less noise present
data = simulate.data(n = 100, mean = 0, sd = 0.5)
x = data$x
y = data$y
print("Less noise")
compare.models(x, y, -0.5, -.5)
# Compare models with more noise present
data = simulate.data(n = 100, mean = 0, sd = 2)
x = data$x
y = data$y
print("More noise")
compare.models(x, y, -5, 1)
library(MASS)
attach(Boston)
names(Boston)
lm.fit = lm(crim ~ zn)
summary(lm.fit)
plot(lm.fit$fitted.values, xlab = "zn", ylab = "Per Capita Crime Rate")
lm.fit = lm(crim ~ indus)
summary(lm.fit)
plot(lm.fit$fitted.values, xlab = "indus", ylab = "Per Capita Crime Rate")
lm.fit = lm(crim ~ chas)
plot(indus, lm.fit$fitted.values, xlab = "indus", ylab = "Per Capita Crime Rate")
?plot
plot(chas, lm.fit$fitted.values, xlab = "chas", ylab = "Per Capita Crime Rate")
plot(nox,lm.fit$fitted.values, xlab = "nox", ylab = "Per Capita Crime Rate")
plot(rm, lm.fit$fitted.values, xlab = "rm", ylab = "Per Capita Crime Rate")
plot(age, lm.fit$fitted.values, xlab = "age", ylab = "Per Capita Crime Rate")
plot(crim ~ zn)
lm.fit$fitted.values
zn
plot(zn, lm.fit$fitted.values, xlab = "indus", ylab = "Per Capita Crime Rate")
lm.fit = lm(crim ~ chas)
plot(lm.fit$fitted.values, xlab = "indus", ylab = "Per Capita Crime Rate")
lm.fit$fitted.values
zn
lm.fit = lm(crim ~ indus)
summary(lm.fit)
plot(lm.fit$fitted.values, xlab = "indus", ylab = "Per Capita Crime Rate")
lm.fit = lm(crim ~ chas)
summary(lm.fit)
plot(lm.fit$fitted.values, xlab = "chas", ylab = "Per Capita Crime Rate")
lm.fit = lm(crim ~ nox)
summary(lm.fit)
plot(lm.fit$fitted.values, xlab = "nox", ylab = "Per Capita Crime Rate")
lm.fit = lm(crim ~ rm)
summary(lm.fit)
plot(lm.fit$fitted.values, xlab = "rm", ylab = "Per Capita Crime Rate")
lm.fit = lm(crim ~ age)
summary(lm.fit)
plot(lm.fit$fitted.values, xlab = "age", ylab = "Per Capita Crime Rate")
lm.fit = lm(crim ~ dis)
summary(lm.fit)
plot(lm.fit$fitted.values, xlab = "dis", ylab = "Per Capita Crime Rate")
lm.fit = lm(crim ~ rad)
summary(lm.fit)
plot(lm.fit$fitted.values, xlab = "rad", ylab = "Per Capita Crime Rate")
lm.fit = lm(crim ~ tax)
summary(lm.fit)
plot(lm.fit$fitted.values, xlab = "tax", ylab = "Per Capita Crime Rate")
lm.fit = lm(crim ~ ptratio)
summary(lm.fit)
plot(lm.fit$fitted.values, xlab = "ptratio", ylab = "Per Capita Crime Rate")
lm.fit = lm(crim ~ black)
summary(lm.fit)
plot(lm.fit$fitted.values, xlab = "black", ylab = "Per Capita Crime Rate")
lm.fit = lm(crim ~ lstat)
summary(lm.fit)
plot(lm.fit$fitted.values, xlab = "lstat", ylab = "Per Capita Crime Rate")
lm.fit = lm(crim ~ medv)
summary(lm.fit)
plot(lm.fit$fitted.values, xlab = "medv", ylab = "Per Capita Crime Rate")
plot(rm, crime)
plot(rm, crim)
plot(age, crim)
names(Boston)
lm.fit = lm(crim ~ zn)
summary(lm.fit)
plot(zn, crim, xlab = "zn", ylab = "crime")
lm.fit = lm(crim ~ indus)
summary(lm.fit)
plot(indus, crim, xlab = "indus", ylab = "crime")
lm.fit = lm(crim ~ chas)
summary(lm.fit)
plot(chas, crim, xlab = "chas", ylab = "crime")
lm.fit = lm(crim ~ nox)
summary(lm.fit)
plot(nox, crim, xlab = "nox", ylab = "crime")
lm.fit = lm(crim ~ rm)
summary(lm.fit)
plot(rm, crim, xlab = "rm", ylab = "crime")
lm.fit = lm(crim ~ age)
summary(lm.fit)
plot(age, crim, xlab = "age", ylab = "crime")
lm.fit = lm(crim ~ dis)
summary(lm.fit)
plot(dis, crim, xlab = "dis", ylab = "crime")
lm.fit = lm(crim ~ rad)
summary(lm.fit)
plot(rad, crim, xlab = "rad", ylab = "crime")
lm.fit = lm(crim ~ tax)
summary(lm.fit)
plot(tax, crim, xlab = "tax", ylab = "crime")
lm.fit = lm(crim ~ ptratio)
summary(lm.fit)
plot(ptratio, crim, xlab = "ptratio", ylab = "crime")
lm.fit = lm(crim ~ black)
summary(lm.fit)
plot(black, crim, xlab = "black", ylab = "crime")
lm.fit = lm(crim ~ lstat)
summary(lm.fit)
plot(lstat, crim, xlab = "lstat", ylab = "crime")
lm.fit = lm(crim ~ medv)
summary(lm.fit)
plot(medv, crim, xlab = "medv", ylab = "crime")
lm.fit = lm(crim ~ zn)
summary(lm.fit)
plot(zn, crim, xlab = "zn", ylab = "crime")
lm.fit = lm(crim ~ indus)
summary(lm.fit)
plot(indus, crim, xlab = "indus", ylab = "crime")
lm.fit = lm(crim ~ chas)
summary(lm.fit)
plot(chas, crim, xlab = "chas", ylab = "crime")
lm.fit = lm(crim ~ nox)
summary(lm.fit)
plot(nox, crim, xlab = "nox", ylab = "crime")
lm.fit = lm(crim ~ rm)
summary(lm.fit)
plot(rm, crim, xlab = "rm", ylab = "crime")
lm.fit = lm(crim ~ age)
summary(lm.fit)
plot(age, crim, xlab = "age", ylab = "crime")
?Boston
names(Boston)
lm.fit = lm(crim ~ zn)
summary(lm.fit)
plot(zn, crim, xlab = "zn", ylab = "crime")
lm.fit = lm(crim ~ indus)
summary(lm.fit)
plot(indus, crim, xlab = "indus", ylab = "crime")
lm.fit = lm(crim ~ chas)
summary(lm.fit)
plot(chas, crim, xlab = "chas", ylab = "crime")
lm.fit = lm(crim ~ nox)
summary(lm.fit)
plot(nox, crim, xlab = "nox", ylab = "crime")
lm.fit = lm(crim ~ rm)
summary(lm.fit)
plot(rm, crim, xlab = "rm", ylab = "crime")
lm.fit = lm(crim ~ age)
summary(lm.fit)
plot(age, crim, xlab = "age", ylab = "crime")
lm.fit = lm(crim ~ dis)
summary(lm.fit)
plot(dis, crim, xlab = "dis", ylab = "crime")
lm.fit = lm(crim ~ rad)
summary(lm.fit)
plot(rad, crim, xlab = "rad", ylab = "crime")
lm.fit = lm(crim ~ tax)
summary(lm.fit)
plot(tax, crim, xlab = "tax", ylab = "crime")
lm.fit = lm(crim ~ ptratio)
summary(lm.fit)
plot(ptratio, crim, xlab = "ptratio", ylab = "crime")
lm.fit = lm(crim ~ black)
summary(lm.fit)
plot(black, crim, xlab = "black", ylab = "crime")
lm.fit = lm(crim ~ lstat)
summary(lm.fit)
plot(lstat, crim, xlab = "lstat", ylab = "crime")
lm.fit = lm(crim ~ medv)
summary(lm.fit)
plot(medv, crim, xlab = "medv", ylab = "crime")
lm.fit = lm(crim ~ lstat)
summary(lm.fit)
plot(lstat, crim, xlab = "lstat", ylab = "crime")
lm.fit = lm(crim ~ medv)
summary(lm.fit)
plot(medv, crim, xlab = "medv", ylab = "crime")
lm.fit = lm(crim ~ .)
lm.fit = lm(crim ~ ., data = Boston)
lm.fit()
summary(lm.fit)
summary(lm.fit)
plot(zn, crim, xlab = "zn", ylab = "crime")
lm.fit = lm(crim ~ indus)
summary(lm.fit)
library(MASS)
attach(Boston)
names(Boston)
# lm.fit = lm(crim ~ zn)
lm.fit = lm(crim ~ zn, + I(zn^2) + I(zn^3))
summary(lm.fit)
plot(zn, crim, xlab = "zn", ylab = "crime")
# lm.fit = lm(crim ~ indus)
lm.fit = lm(crim ~ indus, + I(indus^2) + I(indus^3))
# lm.fit = lm(crim ~ zn)
lm.fit = lm(crim ~ zn, + I(zn^2) + I(zn^3))
summary(lm.fit)
plot(zn, crim, xlab = "zn", ylab = "crime")
# lm.fit = lm(crim ~ indus)
lm.fit = lm(crim ~ indus, + I(indus^2) + I(indus^3))
summary(lm.fit)
plot(indus, crim, xlab = "indus", ylab = "crime")
# lm.fit = lm(crim ~ chas)
lm.fit = lm(crim ~ chas, + I(chas^2) + I(chas^3))
summary(lm.fit)
plot(chas, crim, xlab = "chas", ylab = "crime")
# lm.fit = lm(crim ~ nox)
lm.fit = lm(crim ~ nox, + I(nox^2) + I(nox^3))
summary(lm.fit)
plot(nox, crim, xlab = "nox", ylab = "crime")
# lm.fit = lm(crim ~ rm)
lm.fit = lm(crim ~ rm, + I(rm^2) + I(rm^3))
summary(lm.fit)
plot(rm, crim, xlab = "rm", ylab = "crime")
# lm.fit = lm(crim ~ medv)
lm.fit = lm(crim ~ medv, + I(medv^2) + I(medv^3))
summary(lm.fit)
plot(medv, crim, xlab = "medv", ylab = "crime")
# lm.fit = lm(crim ~ zn)
lm.fit = lm(crim ~ zn, + I(zn^2) + I(zn^3))
summary(lm.fit)
# lm.fit = lm(crim ~ zn)
lm.fit = lm(crim ~ zn, + I(zn^2) + I(zn^3))
summary(lm.fit)
dev.off()
rm(list = ls())
set.seed(1)
x1 = runif(100)
x2 = 0.5*x1 + rnorm(100)/10
y = 2 + 2*x1 + 0.3*x2 + rnorm(100)
?abline
x1=c(x1, 0.1)
x2=c(x2, 0.8)
y=c(y,6)
summary(x1)
summary(x2)
summary(y)
?summary
# Scatter plot between predictors
plot(x1, x2)
# Least squares regression fit
plot(x1 + x2, y)
# Using x1 and x2
lm.fit = lm(y ~ x1 + x2)
abline(lm.fit, col = "red", lty = 2)
# Using only x1
lm.fit2 = lm(y ~ x1)
summary(lm.fit2)
abline(lm.fit2, col = "blue", lty = 2)
# Using only x2
lm.fit3 = lm(y ~ x2)
summary(lm.fit3)
abline(lm.fit3, col = "purple", lty = 2)
# legend(0, 6, legend = c("y ~ x1"), lty = c(3), col = c("purple"))
# legend(0, 6, legend = c("y ~ x1"), lty = c(3), col = c("purple"))
# Compare linear regression models
data = simulate.data(n = 100, mean = 0, sd = 1)
x = data$x
y = data$y
print("Moderate noise")
compare.models(x, y, legX = -2, legY = 0.3)
set.seed(1)
simulate.data = function(n, mean, sd) {
x = rnorm(n = n, mean = mean, sd = sd)
eps = rnorm(n = n, mean = mean, sd = sd)
y = -1 + 0.5*x + eps # true f
summary(y)
return(data.frame(x, y))
}
compare.models = function(x, y, legX = -2, legY = 0) {
# X vs Y has a positive correlation
plot(x, y, main = "Linear Regression Comparison")
# Fit least squares model
lm.fit = lm(y ~ x) # estimated f
print("Without quadratic term")
print(summary(lm.fit))
print("Confidence interval:")
print(confint(lm.fit))
abline(lm.fit, col = "red")
print("=======================================================================")
# Fit using quadratic term
lm.fit2 = lm(y ~ x + I(x^2))
print("With quadratic term")
print(summary(lm.fit2))
print("Confidence interval:")
print(confint(lm.fit2))
abline(lm.fit2, col = "blue")
legend(legX, legY, legend = c("y ~ x", "y ~ x + x^2"), lty = c(1), col = c("red", "blue"))
}
# Compare linear regression models
data = simulate.data(n = 100, mean = 0, sd = 1)
x = data$x
y = data$y
print("Moderate noise")
compare.models(x, y, legX = -2, legY = 0.3)
# Compare models with less noise present
data = simulate.data(n = 100, mean = 0, sd = 0.5)
x = data$x
y = data$y
print("Less noise")
compare.models(x, y, -0.5, -.5)
# lm.fit = lm(crim ~ zn)
lm.fit = lm(crim ~ zn, + I(zn^2) + I(zn^3))
summary(lm.fit)
# lm.fit = lm(crim ~ indus)
lm.fit = lm(crim ~ indus, + I(indus^2) + I(indus^3))
summary(lm.fit)
